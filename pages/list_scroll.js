import Head from 'next/head'
import { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import Link from 'next/link';
import InfiniteScroll from 'react-infinite-scroll-component';

const ItemList = ({ initialItems }) => {
  const [itemList, setItemList] = useState(initialItems.results);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);

  const getMovies = async (page) => {
    const res = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/movie/popular?&api_key=${process.env.NEXT_PUBLIC_API_KEY}&language=en-US&page=${page}`
    );
    const newItems = res.data.results;
    setItemList((prevItems) => [...prevItems, ...newItems]);
    setCurrentPage(page);
  };

  const fetchMoreData = () => {
    if (currentPage >= initialItems.total_pages) {
      setHasMore(false);
      return;
    }
    getMovies(currentPage + 1);
  };

  useEffect(() => {
    // 이 페이지에서 스크롤이 발생할 때마다, 스크롤 위치를 저장합니다.
    const handleScroll = () => {
      localStorage.setItem('scrollY', window.scrollY.toString());
    };
    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // 이미지들이 다 로딩된 후에 스크롤 위치를 복원합니다.
  const restoreScrollPosition = useCallback(() => {
    const savedScrollY = parseInt(localStorage.getItem('scrollY'));
    console.log(savedScrollY)
    if (!isNaN(savedScrollY)) {
      window.scrollTo(0, savedScrollY);
    }
  }, []);

  useEffect(() => {
    if (itemList.length > initialItems.results.length) {
        console.log(2)
        restoreScrollPosition();
    }
  }, [itemList, restoreScrollPosition]);

  return (
    <>
    <Head>
        <title>리스트 페이징</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
    </Head>
      <div>
        <div className='item_list'>
        {itemList.map((item) => (
          <div key={item.id} className="item">
            <Link href={`/detail/${item.id}`}>
              <img src={`https://image.tmdb.org/t/p/w500/${item.poster_path}`}/>
              <div className="cnt">
                  <span className="subject">{item.original_title}</span>
                  <span className="date">{item.release_date}</span>
              </div>
            </Link>
          </div>
        ))}
        </div>
      </div>
    <InfiniteScroll
      dataLength={itemList.length}
      next={fetchMoreData}
      hasMore={hasMore}
      loader={<h4>Loading...</h4>}
    >
        <div className='item_list'>
        {itemList.map((item) => (
        <div key={item.id}>
          <h2>{item.title}</h2>
        </div>
      ))}
      </div>
    </InfiniteScroll>

    <style jsx>{`
        .item_list{display:flex;flex-wrap:wrap;padding:15px;}
        .item_list .item{width:49%;}
        .item_list .item:nth-child(2n){margin-left:2%;}
        .item_list .item:nth-child(n + 3){margin-top:5%}
        .item_list .item img{width:100%;}
        .item_list .item .cnt{margin-top:10px;}
        .item_list .item .cnt .subject{display:block;font-size:16px;color:#000;font-weight:600;}
        .item_list .item .cnt .date{font-size:12px;color:#555;display:block;margin-top:5px;}
      `}</style>
    </>
  );
};

export async function getServerSideProps() {
    const res = await axios.get(
      `${process.env.API_URL}/movie/popular?&api_key=${process.env.API_KEY}&language=en-US&page=1`
    );
    const initialItems = { results: res.data.results, total_pages: res.data.total_pages };
    return {
      props: {
        initialItems,
      },
    };
  }
  
export default ItemList;