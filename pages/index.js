import Head from 'next/head'
import Axios from 'axios'
import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import Pagination from "react-js-pagination";
import { useRouter } from 'next/router';

const ITEMS_PER_PAGE = 20;

export default function Home(props) {
  const router = useRouter();
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [itemList, setitemList] = useState([]);
  
  // 페이지가 변경되었을 때 스크롤을 최상단으로 이동시키는 함수
  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  // 페이지가 변경되면 최상단으로 스크롤 이동
  useEffect(() => {
    scrollToTop();
  }, [currentPage]);

  useEffect(() => {
    setitemList(props.data.results.slice(0, ITEMS_PER_PAGE));
    setTotalPages(props.data.total_pages);
  }, []);

  const fetchData = async (pageNumber) => {
    const res = await Axios.get(`${process.env.NEXT_PUBLIC_API_URL}/movie/popular?&api_key=${process.env.NEXT_PUBLIC_API_KEY}&page=${pageNumber}`);
    
    const results = res.data.results.slice(0, ITEMS_PER_PAGE);
    const totalPages = res.data.total_pages || 1; // totalPages가 0인 경우 1로 설정
    
    setitemList(results);
    setTotalPages(totalPages);
    setCurrentPage(pageNumber);
  
    // 페이지 이동 시 query string을 변경해줍니다.
    router.push(`/?page=${pageNumber}`, undefined, { shallow: true });
  };

  useEffect(() => {
    const page = parseInt(router.query.page) || 1; // 페이지 번호를 query string에서 가져오고, 없으면 1로 설정
    fetchData(page);
  }, [router.query.page]);

  return (
    <>
      <Head>
        <title>리스트 페이징</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className='item_list'>
        {itemList.map((item) => (
          <div key={item.id} className="item">
            <Link href={`/detail/${item.id}`}>
              <img src={`https://image.tmdb.org/t/p/w500/${item.poster_path}`}/>
              <div className="cnt">
                  <span className="subject">{item.original_title}</span>
                  <span className="date">{item.release_date}</span>
              </div>
            </Link>
          </div>
        ))}
        </div>
      </div>
      <Pagination
        activePage={currentPage}
        itemsCountPerPage={ITEMS_PER_PAGE}
        totalItemsCount={totalPages * ITEMS_PER_PAGE}
        pageRangeDisplayed={5}
        onChange={fetchData}
        firstPageText={"처음"}
        prevPageText={"이전"}
        nextPageText={"다음"}
        lastPageText={"끝"}
      />

      <style jsx>{`
        .item_list{display:flex;flex-wrap:wrap;padding:15px;}
        .item_list .item{width:49%;}
        .item_list .item:nth-child(2n){margin-left:2%;}
        .item_list .item:nth-child(n + 3){margin-top:5%}
        .item_list .item img{width:100%;}
        .item_list .item .cnt{margin-top:10px;}
        .item_list .item .cnt .subject{display:block;font-size:16px;color:#000;font-weight:600;}
        .item_list .item .cnt .date{font-size:12px;color:#555;display:block;margin-top:5px;}
      `}</style>
    </>
  )
}

export const getServerSideProps = async (context) => {
  const { query } = context;
  const page = query.page || 1; // page 값이 없으면 1을 기본 값으로 설정
  const res = await Axios.get(`${process.env.API_URL}/movie/popular?&api_key=${process.env.API_KEY}&page=${page}`);

  return {
    props: {
      data: res.data,
      page: parseInt(page),
    },
  };
};
